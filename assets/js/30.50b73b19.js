(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{388:function(e,a,l){"use strict";l.r(a);var n=l(44),t=Object(n.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h3",{attrs:{id:"amd-运行在浏览器端"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#amd-运行在浏览器端"}},[e._v("#")]),e._v(" amd(运行在浏览器端)")]),e._v(" "),l("ul",[l("li",[e._v("需要引入 require.js")])]),e._v(" "),l("h3",{attrs:{id:"common-js-运行在-node-环境"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#common-js-运行在-node-环境"}},[e._v("#")]),e._v(" common.js(运行在 node 环境)")]),e._v(" "),l("ul",[l("li",[e._v("Import 和 module.exports")])]),e._v(" "),l("h3",{attrs:{id:"webpack"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),l("h4",{attrs:{id:"默认配置文件的名字-webpack-config-js"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#默认配置文件的名字-webpack-config-js"}},[e._v("#")]),e._v(" 默认配置文件的名字 webpack.config.js")]),e._v(" "),l("h4",{attrs:{id:"css-抽离插件-mini-css-extract-plugin"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#css-抽离插件-mini-css-extract-plugin"}},[e._v("#")]),e._v(" css 抽离插件 mini-css-extract-plugin")]),e._v(" "),l("h4",{attrs:{id:"webpack-dev-middleware-webpack-中间件-可以在-node-中启动-webpack-服务-用在开发时的跨域上"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-middleware-webpack-中间件-可以在-node-中启动-webpack-服务-用在开发时的跨域上"}},[e._v("#")]),e._v(" webpack-dev-middleware webpack 中间件,可以在 node 中启动 webpack 服务,用在开发时的跨域上")]),e._v(" "),l("h4",{attrs:{id:"tree-shaking-打包的时候自动把没用的代码删除"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking-打包的时候自动把没用的代码删除"}},[e._v("#")]),e._v(" tree-shaking 打包的时候自动把没用的代码删除")]),e._v(" "),l("h4",{attrs:{id:"mini-css-extract-plugin-抽离写在-html-中的-css"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mini-css-extract-plugin-抽离写在-html-中的-css"}},[e._v("#")]),e._v(" "),l("strong",[e._v("mini-css-extract-plugin")]),e._v(" 抽离写在 html 中的 css")]),e._v(" "),l("h4",{attrs:{id:"file-loader"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#file-loader"}},[e._v("#")]),e._v(" "),l("strong",[e._v("file-loader")])]),e._v(" "),l("ul",[l("li",[e._v("可以用来帮助webpack打包处理一系列的图片文件；比如："),l("strong",[e._v(".png")]),e._v(" 、 "),l("strong",[e._v(".jpg 、.jepg")]),e._v("等格式的图片；")]),e._v(" "),l("li",[e._v("使用file-loader打包的图片会给每张图片都生成一个随机的hash值作为图片的名字；")])]),e._v(" "),l("h4",{attrs:{id:"url-loader"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#url-loader"}},[e._v("#")]),e._v(" url-loader")]),e._v(" "),l("ul",[l("li",[e._v("把图片文件转成 base64 的文件")])]),e._v(" "),l("h4",{attrs:{id:"报错信息提示"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#报错信息提示"}},[e._v("#")]),e._v(" 报错信息提示：")]),e._v(" "),l("ol",[l("li",[l("code",[e._v("devtool:source-map")]),e._v(" "),l("ul",[l("li",[e._v("增加映射文件，可以帮助我们调试源码，会单独生产 sourcemap 文件，出错了会标识到当前报错的行和列")])])]),e._v(" "),l("li",[l("code",[e._v("devtool:eval-source-map")]),e._v(" "),l("ul",[l("li",[e._v("不会产生单独的文件，但可以显示报错的列和行")])])]),e._v(" "),l("li",[l("code",[e._v("devtool:cheap-module-souce-map")]),e._v(" "),l("ul",[l("li",[e._v("不会产生列，是一个单独的映射文件")])])]),e._v(" "),l("li",[l("code",[e._v("devtool:cheap-eval-source-map")]),e._v(" "),l("ul",[l("li",[e._v("不会生成文件，集成在打包后的文件中，不会产生列")])])])]),e._v(" "),l("h3",{attrs:{id:"webpack3-和-webpack4-的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack3-和-webpack4-的区别"}},[e._v("#")]),e._v(" webpack3 和 webpack4 的区别")]),e._v(" "),l("ol",[l("li",[e._v("webpack4 增加了 model 的配置（只有两种值development | production）")]),e._v(" "),l("li",[e._v("CommonChunksPlugin已经从webpack4中移除。可使用optimization.splitChunks进行模块划分（提取公用代码）。")]),e._v(" "),l("li",[e._v("webpack4使用MiniCssExtractPlugin取代ExtractTextWebpackPlugin。\n.代码分割。")]),e._v(" "),l("li",[e._v("使用动态import，而不是用system.import或者require.ensure")]),e._v(" "),l("li",[e._v("vue-loader。使用vue-loader插件为.vue文件中的各部分使用相对应的loader，比如css-loader")]),e._v(" "),l("li",[e._v("UglifyJsPlugin：现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true")])]),e._v(" "),l("h3",{attrs:{id:"webpack5新特性"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack5新特性"}},[e._v("#")]),e._v(" webpack5新特性")]),e._v(" "),l("p",[e._v("官方描述：")]),e._v(" "),l("ol",[l("li",[e._v("使用持久化缓存提高构建性能；")]),e._v(" "),l("li",[e._v("使用更好的算法和默认值改进长期缓存（long-term caching）；")]),e._v(" "),l("li",[e._v("清理内部结构而不引入任何破坏性的变化；")]),e._v(" "),l("li",[e._v("引入一些breaking changes，以便尽可能长的使用v5版本。")])]),e._v(" "),l("p",[e._v("通俗版描述：")]),e._v(" "),l("ol",[l("li",[e._v("减小打包后的文件体积")]),e._v(" "),l("li",[e._v("按需加载支持文件名模式")]),e._v(" "),l("li",[e._v("使用long-term caching解决生产环境下moduleIds & chunkIds变化的问题")]),e._v(" "),l("li",[e._v('使用cache: {type: "filesystem"}配置实现持久化缓存，提高构建速度')]),e._v(" "),l("li",[e._v("优化minSize&maxSize的配置方式")]),e._v(" "),l("li",[e._v("Node.js polyfills 自动加载功能被移除")])]),e._v(" "),l("h3",{attrs:{id:"常用的-loader-及其作用"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#常用的-loader-及其作用"}},[e._v("#")]),e._v(" 常用的 loader 及其作用：")]),e._v(" "),l("ul",[l("li",[e._v("style-loader：将CSS添加到DOM的内联样式标签style里")]),e._v(" "),l("li",[e._v("css-loader：允许将CSS文件通过require的方式引入，并返回CSS代码")]),e._v(" "),l("li",[e._v("less-loader：处理less")]),e._v(" "),l("li",[e._v("sass-loader：处理sass")]),e._v(" "),l("li",[e._v("postcss-loader：用postcss来处理CSS")]),e._v(" "),l("li",[e._v("file-loader：分发文件到output目录并返回相对路径")]),e._v(" "),l("li",[e._v("url-loader 和 file-loader 类似，但是当文件小于设定的limit时可以返回一个Data Url")]),e._v(" "),l("li",[e._v("html-minify-loader：压缩HTML文件")]),e._v(" "),l("li",[e._v("babel-loader：把ES6文件转换成ES5文件")])]),e._v(" "),l("h3",{attrs:{id:"常用插件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#常用插件"}},[e._v("#")]),e._v(" 常用插件")]),e._v(" "),l("ul",[l("li",[e._v("HtmlWebpackPlugin 是依据一个简单的模板，帮助生成最终的 Html5 文件，这个文件中自动引用了打包后的 JS 文件。每次编译都在文件名中插入一个不同的哈希值。")]),e._v(" "),l("li",[l("code",[e._v("CopyWebpackPlugin")]),e._v(" : 在 webpack 中拷贝文件和文件夹，一般用于将不需要打包的静态文件 copy 到我们最终打包的文件目录下")])]),e._v(" "),l("h3",{attrs:{id:"webpack-打包优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包优化"}},[e._v("#")]),e._v(" Webpack 打包优化")]),e._v(" "),l("ol",[l("li",[e._v("DllPlugin  动态链接库")])]),e._v(" "),l("h3",{attrs:{id:"webpack中-loader和plugin的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack中-loader和plugin的区别"}},[e._v("#")]),e._v(" webpack中 loader和plugin的区别")]),e._v(" "),l("ul",[l("li",[l("p",[e._v("loader用于转换、将A文件进行编译形成B文件")])]),e._v(" "),l("li",[l("p",[e._v("plugin用于处理打包过程中的自定义操作的扩展器，不直接操作文件")])])]),e._v(" "),l("p",[e._v("webpack 的构建流程是什么")]),e._v(" "),l("p",[e._v("初始化参数：解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数,形成最后的配置结果；")]),e._v(" "),l("p",[e._v("开始编译：上一步得到的参数初始化compiler对象，注册所有配置的插件，插件 监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的run方法开始执行编译；")]),e._v(" "),l("p",[e._v("确定入口：从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去；")]),e._v(" "),l("p",[e._v("编译模块：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),e._v(" "),l("p",[e._v("完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry或分包配置生成代码块chunk;")]),e._v(" "),l("p",[e._v("输出完成：输出所有的chunk到文件系统；")]),e._v(" "),l("p",[e._v("webpack 的热更新原理\n其实是自己开启了express应用，添加了对webpack编译的监听，添加了和浏览器的websocket长连接，当文件变化触发webpack进行编译并完成后，会通过sokcet消息告诉浏览器准备刷新。而为了减少刷新的代价，就是不用刷新网页，而是刷新某个模块，webpack-dev-server可以支持热更新，通过生成 文件的hash值来比对需要更新的模块，浏览器再进行热替换\n服务端")]),e._v(" "),l("p",[e._v("启动 webpack-dev-server服务器\n创建webpack实例\n创建server服务器\n添加webpack的done事件回调\n编译完成向客户端发送消息\n创建express应用app\n设置文件系统为内存文件系统\n添加 webpack-dev-middleware 中间件\n中间件负责返回生成的文件\n启动webpack编译\n创建http服务器并启动服务\n使用sockjs在浏览器端和服务端之间建立一个websocket长连接\n创建socket服务器")]),e._v(" "),l("p",[e._v("客户端")]),e._v(" "),l("p",[e._v("webpack-dev-server/client端会监听到此hash消息\n客户端收到ok消息后会执行reloadApp方法进行更新\n在reloadApp中会进行判断，是否支持热更新，如果支持的话发生 webpackHotUpdate事件，如果不支持就直接刷新浏览器\n在 webpack/hot/dev-server.js 会监听 webpackHotUpdate 事件\n在check方法里会调用module.hot.check方法\nHotModuleReplacement.runtime请求Manifest\n通过调用 JsonpMainTemplate.runtime 的 hotDownloadManifest方法\n调用JsonpMainTemplate.runtime的hotDownloadUpdateChunk方法通过JSONP请求获取最新的模块代码\n补丁js取回来或会调用 JsonpMainTemplate.runtime.js 的 webpackHotUpdate 方法\n然后会调用 HotModuleReplacement.runtime.js 的 hotAddUpdateChunk方法动态更新 模块代码\n然后调用hotApply方法进行热更")]),e._v(" "),l("p",[e._v("webpack 打包是hash码是如何生成的\n1.webpack生态中存在多种计算hash的方式")]),e._v(" "),l("p",[e._v("hash\nchunkhash\ncontenthash")]),e._v(" "),l("p",[e._v("hash代表每次webpack编译中生成的hash值，所有使用这种方式的文件hash都相同。每次构建都会使webpack计算新的hash。chunkhash基于入口文件及其关联的chunk形成，某个文件的改动只会影响与它有关联的chunk的hash值，不会影响其他文件contenthash根据文件内容创建。当文件内容发生变化时，contenthash发生变化\n2.避免相同随机值")]),e._v(" "),l("p",[e._v("webpack在计算hash后分割chunk。产生相同随机值可能是因为这些文件属于同一个chunk,可以将某个文件提到独立的chunk（如放入entry）")]),e._v(" "),l("p",[e._v("webpack 离线缓存静态资源如何实现")]),e._v(" "),l("p",[e._v("在配置webpack时，我们可以使用html-webpack-plugin来注入到和html一段脚本来实现将第三方或者共用资源进行 静态化存储在html中注入一段标识，例如 <% HtmlWebpackPlugin.options.loading.html %> ,在 html-webpack-plugin 中即可通过配置html属性，将script注入进去\n利用 webpack-manifest-plugin 并通过配置 webpack-manifest-plugin ,生成 manifestjson 文件，用来对比js资源的差异，做到是否替换，当然，也要写缓存script\n在我们做Cl以及CD的时候，也可以通过编辑文件流来实现静态化脚本的注入，来降低服务器的压力，提高性能\n可以通过自定义plugin或者html-webpack-plugin等周期函数，动态注入前端静态化存储script")]),e._v(" "),l("p",[e._v("webpack 常见的plugin有哪些")]),e._v(" "),l("p",[e._v("ProvidePlugin：自动加载模块，代替require和import\nhtml-webpack-plugin可以根据模板自动生成html代码，并自动引用css和js文件\nextract-text-webpack-plugin 将js文件中引用的样式单独抽离成css文件\nDefinePlugin 编译时配置全局变量，这对开发模式和发布模式的构建允许不同的行为非常有用。\nHotModuleReplacementPlugin 热更新\noptimize-css-assets-webpack-plugin 不同组件中重复的css可以快速去重\nwebpack-bundle-analyzer 一个webpack的bundle文件分析工具，将bundle文件以可交互缩放的treemap的形式展示。\ncompression-webpack-plugin 生产环境可采用gzip压缩JS和CSS\nhappypack：通过多进程模型，来加速代码构建\nclean-wenpack-plugin 清理每次打包下没有使用的文件\nspeed-measure-webpack-plugin:可以看至U每个Loader和Plugin执行耗时（整个扌丁包耗时、每个Plugin和 Loader 耗时）\nwebpack-bundle-analyzer:可视化Webpack输出文件的体积（业务组件、依赖第三方模块")]),e._v(" "),l("p",[e._v("webpack 插件如何实现")]),e._v(" "),l("p",[e._v("webpack本质是一个事件流机制，核心模块：tabable(Sync + Async)Hooks 构造出 === Compiler(编译) + Compiletion(创建bundles)\ncompiler对象代表了完整的webpack环境配置。这个对象在启动webpack时被一次性建立，并配置好所有可操作的设置，包括options、loader和plugin。当在webpack环境中应用一插件时，插件将收到此compiler对象的引用。可以使用它来访问webpack的主环境\ncompilation对象代表了一次资源版本构建。当运行webpack开发环境中间件时，每当检测到一个文件变化，就会创建一个新的compilation,从而生成一个新的编译资源。一个compilation对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态的信息。compilation对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用\n创建一个插件函数，在其prototype上定义apply方法，指定一个webpack自身的事件钩子\n函数内部处理webpack内部实例的特定数据\n处理完成后，调用webpack提供的回调函数")]),e._v(" "),l("p",[e._v('function MyWebpackPlugin()(\n}；\n// prototype 上定义 apply 方法\nMyWebpackPlugin.prototype.apply=function(){\n// 指定一个事件函数挂载到webpack\ncompiler.pluginCwebpacksEventHook"funcion (compiler)( console. log(“这是一个插件”)；\n// 功能完成调用后webpack提供的回调函数\ncallback()\n})\n复制代码\nwebpack有哪些常⻅的Loader')]),e._v(" "),l("p",[e._v("file-loader：把⽂件输出到⼀个⽂件夹中，在代码中通过相对 URL 去引⽤输出的⽂件\nurl-loader：和 file-loader 类似，但是能在⽂件很⼩的情况下以 base64 的⽅式把⽂件内容注⼊到代码中去\nsource-map-loader：加载额外的 Source Map ⽂件，以⽅便断点调试\nimage-loader：加载并且压缩图⽚⽂件\nbabel-loader：把 ES6 转换成 ES5\ncss-loader：加载 CSS，⽀持模块化、压缩、⽂件导⼊等特性\nstyle-loader：把 CSS 代码注⼊到 JavaScript 中，通过 DOM 操作去加载 CSS。\neslint-loader：通过 ESLint 检查 JavaScript 代码")]),e._v(" "),l("p",[e._v("webpack如何实现持久化缓存")]),e._v(" "),l("p",[e._v("服务端设置http缓存头（cache-control）\n打包依赖和运行时到不同的chunk，即作为splitChunk,因为他们几乎是不变的\n延迟加载：使用import()方式，可以动态加载的文件分到独立的chunk,以得到自己的chunkhash\n保持hash值的稳定：编译过程和文件内通的更改尽量不影响其他文件hash的计算，对于低版本webpack生成的增量数字id不稳定问题，可用hashedModuleIdsPlugin基于文件路径生成解决")]),e._v(" "),l("p",[e._v("如何⽤webpack来优化前端性能？\n⽤webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。")]),e._v(" "),l("p",[e._v("压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css\n利⽤CDN加速: 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的 publicPath 参数来修改资源路径\nTree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 --optimize-minimize 来实现\nCode Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存\n提取公共第三⽅库: SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码")]),e._v(" "),l("p",[e._v("webpack treeShaking机制的原理")]),e._v(" "),l("p",[e._v("treeShaking 也叫摇树优化，是一种通过移除多于代码，来优化打包体积的，生产环境默认开启。\n可以在代码不运行的状态下，分析出不需要的代码；\n利用es6模块的规范")]),e._v(" "),l("p",[e._v("ES6 Module引入进行静态分析，故而编译的时候正确判断到底加载了那些模块\n静态分析程序流，判断那些模块和变量未被使用或者引用，进而删除对应代码")])])}),[],!1,null,null,null);a.default=t.exports}}]);